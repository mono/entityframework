<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MigrateTitle" xml:space="preserve">
    <value>Code First Migrations Command Line Utility</value>
  </data>
  <data name="MigrateDescription" xml:space="preserve">
    <value>Applies any pending migrations to the database.</value>
  </data>
  <data name="ErrorMessage" xml:space="preserve">
    <value>ERROR: {0}</value>
  </data>
  <data name="WarningMessage" xml:space="preserve">
    <value>WARNING: {0}</value>
  </data>
  <data name="VerboseMessage" xml:space="preserve">
    <value>VERBOSE: {0}</value>
  </data>
  <data name="DuplicateCommand" xml:space="preserve">
    <value>Duplicate Command "{0}"</value>
  </data>
  <data name="DuplicateParameterIndex" xml:space="preserve">
    <value>Duplicate Parameter Index [{0}] on Property "{1}"</value>
  </data>
  <data name="ParameterOutOfOrder" xml:space="preserve">
    <value>Out of order parameter "{0}" should have be at parameter index {1} but was found at {2}</value>
  </data>
  <data name="InvalidKey" xml:space="preserve">
    <value>"{0}" is not a valid choice, valid keys are "{1}"</value>
  </data>
  <data name="PressAnyKey" xml:space="preserve">
    <value>Press any key to continue...</value>
  </data>
  <data name="UnsupportedPropertyType" xml:space="preserve">
    <value>Unsupported property type {0}</value>
  </data>
  <data name="InvalidPropertyParameterIndexValue" xml:space="preserve">
    <value>Invalid ParameterIndex value on property "{0}"</value>
  </data>
  <data name="AssemblyNameArgument" xml:space="preserve">
    <value>assembly</value>
  </data>
  <data name="ContextAssemblyNameArgument" xml:space="preserve">
    <value>contextAssembly</value>
  </data>
  <data name="ConfigurationTypeNameArgument" xml:space="preserve">
    <value>configurationType</value>
  </data>
  <data name="AssemblyNameDescription" xml:space="preserve">
    <value>Specifies the name of the assembly that contains the migrations configuration type.</value>
  </data>
  <data name="ContextAssemblyNameDescription" xml:space="preserve">
    <value>Specifies the name of the assembly that contains the DbContext type if different from the assembly that contains the migrations configuration type.</value>
  </data>
  <data name="ConfigurationTypeNameDescription" xml:space="preserve">
    <value>Specifies the name of the migrations configuration type. If omitted, Code First Migrations will attempt to locate a single migrations configuration type in the specified assembly.</value>
  </data>
  <data name="TargetMigrationDescription" xml:space="preserve">
    <value>Specifies the name of a particular migration to update the database to. If omitted, the current model will be used.</value>
  </data>
  <data name="WorkingDirectoryDescription" xml:space="preserve">
    <value>Specifies the working directory of your application.</value>
  </data>
  <data name="ConfigurationFileDescription" xml:space="preserve">
    <value>Specifies the Web.config or App.config file of your application.</value>
  </data>
  <data name="DataDirectoryDescription" xml:space="preserve">
    <value>Specifies the directory to use when resolving connection strings containing the |DataDirectory| substitution string.</value>
  </data>
  <data name="ConnectionStringNameDescription" xml:space="preserve">
    <value>Specifies the name of the connection string to use from the specified configuration file. If omitted, the context's default connection will be used.</value>
  </data>
  <data name="ConnectionStringDescription" xml:space="preserve">
    <value>Specifies the connection string to use. If omitted, the context's default connection will be used.</value>
  </data>
  <data name="ConnectionProviderNameDescription" xml:space="preserve">
    <value>Specifies the provider invariant name of the connection string.</value>
  </data>
  <data name="ForceDescription" xml:space="preserve">
    <value>Indicates that automatic migrations which might incur data loss should be allowed.</value>
  </data>
  <data name="VerboseDescription" xml:space="preserve">
    <value>Indicates that the executing SQL and additional diagnostic information should be output to the console window.</value>
  </data>
  <data name="HelpDescription" xml:space="preserve">
    <value>Display this help message.</value>
  </data>
  <data name="AmbiguousAttributeValues" xml:space="preserve">
    <value>Only one of '{0}' and '{1}' can be assigned to.</value>
    <comment>## ExceptionType=InvalidOperationException</comment>
  </data>
  <data name="AmbiguousConnectionString" xml:space="preserve">
    <value>Only one of /connectionStringName or /connectionString can be specified.</value>
    <comment>## ExceptionType=CmdLine.CommandLineException</comment>
  </data>
  <data name="MissingConnectionInfo" xml:space="preserve">
    <value>/connectionString and /connectionProviderName must be specified together.</value>
    <comment>## ExceptionType=CmdLine.CommandLineException</comment>
  </data>
  <data name="InvalidParameterIndexValue" xml:space="preserve">
    <value>Invalid ParameterIndex value</value>
    <comment>## ExceptionType=CmdLine.CommandLineException</comment>
  </data>
</root>