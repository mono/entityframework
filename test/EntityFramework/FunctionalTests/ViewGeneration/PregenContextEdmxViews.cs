// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute(typeof(System.Data.Entity.ViewGeneration.PregenContextEdmxViews))]

namespace System.Data.Entity.ViewGeneration
{


    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class PregenContextEdmxViews : System.Data.Entity.Core.Mapping.EntityViewContainer
    {
        public static bool View0Accessed { get; set; }
        public static bool View1Accessed { get; set; }

        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public PregenContextEdmxViews()
        {
            this.EdmEntityContainerName = "PregenContextEdmx";
            this.StoreEntityContainerName = "CodeFirstDatabase";
            this.HashOverMappingClosure = "e204170d57ba6e546c20a5b14040470581534f5d2b996ab84f7b44fe13154168";
            this.ViewCount = 2;
        }

        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            throw new System.IndexOutOfRangeException();
        }

        /// <Summary>
        /// return view for CodeFirstDatabase.PregenBlogEdmx
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            View0Accessed = true;

            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.PregenBlogEdmx", @"
    SELECT VALUE -- Constructing PregenBlogEdmx
        [CodeFirstDatabaseSchema.PregenBlogEdmx](T1.PregenBlogEdmx_Id)
    FROM (
        SELECT 
            T.Id AS PregenBlogEdmx_Id, 
            True AS _from0
        FROM PregenContextEdmx.Blogs AS T
    ) AS T1");
        }

        /// <Summary>
        /// return view for PregenContextEdmx.Blogs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            View1Accessed = true;

            return new System.Collections.Generic.KeyValuePair<string, string>("PregenContextEdmx.Blogs", @"
    SELECT VALUE -- Constructing Blogs
        [System.Data.Entity.ViewGeneration.PregenBlogEdmx](T1.PregenBlogEdmx_Id)
    FROM (
        SELECT 
            T.Id AS PregenBlogEdmx_Id, 
            True AS _from0
        FROM CodeFirstDatabase.PregenBlogEdmx AS T
    ) AS T1");
        }
    }
}
