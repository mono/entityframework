// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute(typeof(System.Data.Entity.ViewGeneration.PregenContextViews))]

namespace System.Data.Entity.ViewGeneration
{
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class PregenContextViews : System.Data.Entity.Core.Mapping.EntityViewContainer
    {
        public static bool View0Accessed { get; set; }
        public static bool View1Accessed { get; set; }

        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public PregenContextViews()
        {
            this.EdmEntityContainerName = "PregenContext";
            this.StoreEntityContainerName = "CodeFirstDatabase";
            this.HashOverMappingClosure = "a76b956abbdcf4cc24982c118d0afa3b1cfaedba377a7663cadd041aa30b81be";
            this.ViewCount = 2;
        }

        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            throw new System.IndexOutOfRangeException();
        }

        /// <Summary>
        /// return view for CodeFirstDatabase.PregenBlog
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            View0Accessed = true;

            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.PregenBlog", "\r\n    SELECT VALUE -- Constructing PregenBlog\r\n        [CodeFirstDatabaseSchema.P" +
                    "regenBlog](T1.PregenBlog_Id)\r\n    FROM (\r\n        SELECT \r\n            T.Id AS P" +
                    "regenBlog_Id, \r\n            True AS _from0\r\n        FROM PregenContext.Blogs AS " +
                    "T\r\n    ) AS T1");
        }

        /// <Summary>
        /// return view for PregenContext.Blogs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            View1Accessed = true;

            return new System.Collections.Generic.KeyValuePair<string, string>("PregenContext.Blogs", @"
    SELECT VALUE -- Constructing Blogs
        [System.Data.Entity.ViewGeneration.PregenBlog](T1.PregenBlog_Id)
    FROM (
        SELECT 
            T.Id AS PregenBlog_Id, 
            True AS _from0
        FROM CodeFirstDatabase.PregenBlog AS T
    ) AS T1");
        }
    }
}
